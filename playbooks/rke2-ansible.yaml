---
##############################################################################################################
# RKE2 Kubernetes Cluster Installation Playbook
# 
# This playbook uses the lablabs.rke2 Ansible role to deploy a highly available RKE2 Kubernetes cluster
# It uses configuration from defaults/main.yml and hosts from inventory/hosts.yml
#
# Role: https://github.com/lablabs/ansible-role-rke2
##############################################################################################################

- name: Prepare all nodes for RKE2 installation
  hosts: k8s_cluster
  become: yes
  gather_facts: yes
  tasks:
    - name: Update system packages (Debian/Ubuntu)
      apt:
        update_cache: yes
        upgrade: safe
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Update system packages (RedHat/Rocky)
      yum:
        name: "*"
        state: latest
        update_cache: yes
      when: ansible_os_family == "RedHat"

    - name: Install required packages
      package:
        name:
          - curl
          - wget
          - tar
          - gzip
        state: present

    - name: Disable swap
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
      ignore_errors: yes

    - name: Enable IPv4 forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        state: present
        reload: yes

    - name: Enable IPv6 forwarding (if needed)
      sysctl:
        name: net.ipv6.conf.all.forwarding
        value: "1"
        state: present
        reload: yes
      ignore_errors: yes

    - name: Load required kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter
      ignore_errors: yes

    - name: Make kernel modules persistent
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/k8s.conf
        mode: '0644'

    - name: Set required sysctl parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { name: 'net.ipv4.ip_forward', value: '1' }
      ignore_errors: yes

- name: Deploy RKE2 Cluster
  hosts: k8s_cluster
  become: yes
  gather_facts: yes
  vars_files:
    - ../defaults/main.yml
  roles:
    - role: lablabs.rke2

- name: Post RKE2 Installation - Configure kubectl on Masters
  hosts: masters
  become: yes
  gather_facts: no
  tasks:
    - name: Wait for RKE2 server to be ready
      wait_for:
        port: "{{ rke2_apiserver_dest_port | default(6443) }}"
        delay: 10
        timeout: 300

    - name: Create .kube directory for root user
      file:
        path: /root/.kube
        state: directory
        mode: '0755'

    - name: Copy kubeconfig to root user home
      copy:
        src: /etc/rancher/rke2/rke2.yaml
        dest: /root/.kube/config
        remote_src: yes
        mode: '0600'

    - name: Set KUBECONFIG environment variable
      lineinfile:
        path: /root/.bashrc
        line: 'export KUBECONFIG=/etc/rancher/rke2/rke2.yaml'
        create: yes

    - name: Add kubectl alias
      lineinfile:
        path: /root/.bashrc
        line: 'alias kubectl="/var/lib/rancher/rke2/bin/kubectl"'
        create: yes

- name: Post-installation verification and configuration
  hosts: masters[0]
  become: yes
  gather_facts: no
  tasks:
    - name: Wait for all nodes to be ready
      shell: |
        /var/lib/rancher/rke2/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml wait --for=condition=Ready nodes --all --timeout=600s
      register: nodes_ready
      retries: 5
      delay: 30
      until: nodes_ready.rc == 0
      changed_when: false

    - name: Get cluster nodes status
      shell: |
        /var/lib/rancher/rke2/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml get nodes -o wide
      register: cluster_nodes
      changed_when: false

    - name: Display cluster nodes
      debug:
        msg: "{{ cluster_nodes.stdout_lines }}"

    - name: Get cluster pods status
      shell: |
        /var/lib/rancher/rke2/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml get pods -A
      register: cluster_pods
      changed_when: false

    - name: Display cluster pods
      debug:
        msg: "{{ cluster_pods.stdout_lines }}"

    - name: Get cluster info
      shell: |
        /var/lib/rancher/rke2/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml cluster-info
      register: cluster_info
      changed_when: false

    - name: Display cluster info
      debug:
        msg: "{{ cluster_info.stdout_lines }}"

    - name: Save kubeconfig locally (optional)
      fetch:
        src: /etc/rancher/rke2/rke2.yaml
        dest: "{{ rke2_download_kubeconf_path | default('/tmp') }}/{{ rke2_download_kubeconf_file_name | default('rke2.yaml') }}"
        flat: yes
      when: rke2_download_kubeconf | default(false) | bool

    - name: Display success message
      debug:
        msg: |
          =========================================
          RKE2 Kubernetes Cluster Installation Complete!
          =========================================
          
          Cluster Configuration:
          - RKE2 Version: {{ rke2_version | default('latest') }}
          - Masters: {{ groups['masters'] | length }}
          - Workers: {{ groups['workers'] | length }}
          - API Server: {{ hostvars[groups['masters'][0]].ansible_host }}:{{ rke2_apiserver_dest_port | default(6443) }}
          - CNI: {{ rke2_cni | default(['canal']) | join(', ') }}
          - Ingress Controller: {{ rke2_ingress_controller | default('ingress-nginx') }}
          
          To access the cluster:
          1. SSH to master node: ssh {{ ansible_user }}@{{ hostvars[groups['masters'][0]].ansible_host }}
          2. Run: export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
          3. Run: /var/lib/rancher/rke2/bin/kubectl get nodes
          
          Or download the kubeconfig and use it locally:
          kubectl --kubeconfig={{ rke2_download_kubeconf_path | default('/tmp') }}/{{ rke2_download_kubeconf_file_name | default('rke2.yaml') }} get nodes

