---
- name: Provision VMs in Proxmox from Template 9000
  hosts: k8s_cluster
  gather_facts: false
  become: false  # Proxmox API calls don't need privilege escalation
  
  vars_files:
    - "{{ playbook_dir }}/../group_vars/all/vars.yml"
    - "{{ playbook_dir }}/../group_vars/all/vault.yml"
  
  vars:
    # Proxmox API connection settings (loaded from group_vars/all/vars.yml)
    # Sensitive credentials are in encrypted group_vars/all/vault.yml
    proxmox_template_id: 9000
    proxmox_template_name: "ubuntu-cloud-init"  # Update with your actual template name in Proxmox
    
    # VM specifications (these will be overridden by role-specific settings)
    vm_storage: local  # Update with your storage name
    vm_network_bridge: vmbr0
    vm_gateway: 192.168.68.1
    
    # Cloud-init settings (SSH key will be read from file)
    vm_ciuser: root
    vm_nameserver: 8.8.8.8
    
    # Master nodes get IDs starting from 200
    # Worker nodes get IDs starting from 210
    master_vm_id_start: 100
    worker_vm_id_start: 110
  
  tasks:
    - name: Debug - Show all Proxmox vault variables
      ansible.builtin.debug:
        msg:
          - "=== Vault Variables ==="
          - "vault_proxmox_api_token_id: {{ vault_proxmox_api_token_id | default('NOT_SET') }}"
          - "vault_proxmox_api_token_secret: {{ vault_proxmox_api_token_secret | default('NOT_SET') | regex_replace('^(.{8}).*(.{4})$', '\\1****\\2') }}"
          - "=== Group Variables ==="
          - "proxmox_host: {{ proxmox_host }}"
          - "proxmox_api_user: {{ proxmox_api_user }}"
          - "proxmox_node: {{ proxmox_node }}"
      run_once: true
      tags: [debug, never]
    
    - name: Set VM ID and resources for master nodes
      ansible.builtin.set_fact:
        vm_id: "{{ master_vm_id_start + groups['masters'].index(inventory_hostname) }}"
        vm_name: "{{ inventory_hostname }}"
        vm_cores: "{{ vm_master_cores }}"
        vm_memory: "{{ vm_master_memory }}"
        vm_disk_size: "{{ vm_master_disk }}"
      when: inventory_hostname in groups['masters']
    
    - name: Set VM ID and resources for worker nodes
      ansible.builtin.set_fact:
        vm_id: "{{ worker_vm_id_start + groups['workers'].index(inventory_hostname) }}"
        vm_name: "{{ inventory_hostname }}"
        vm_cores: "{{ vm_worker_cores }}"
        vm_memory: "{{ vm_worker_memory }}"
        vm_disk_size: "{{ vm_worker_disk }}"
      when: inventory_hostname in groups['workers']
    
    - name: Display VM provisioning information
      ansible.builtin.debug:
        msg: "Provisioning VM '{{ vm_name }}' with ID {{ vm_id }} at IP {{ ansible_host }} - CPU: {{ vm_cores }} cores, RAM: {{ vm_memory }}MB, Disk: {{ vm_disk_size }}GB"
    
    - name: Provision VM from template
      ansible.builtin.include_role:
        name: provision-vms

- name: Post-provisioning tasks
  hosts: k8s_cluster
  gather_facts: false
  become: false
  
  tasks:
    - name: Wait for cloud-init to complete
      ansible.builtin.wait_for:
        host: "{{ ansible_host }}"
        port: 22
        delay: 30
        timeout: 600
        state: started
        search_regex: OpenSSH
      delegate_to: localhost
      connection: local
    
    - name: Wait for SSH to be fully ready
      ansible.builtin.wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 10
        timeout: 300
    
    - name: Wait for cloud-init to finish initialization
      ansible.builtin.command: cloud-init status --wait
      register: cloud_init_status
      changed_when: false
      failed_when: false
      async: 300
      poll: 10
    
    - name: Display cloud-init status
      ansible.builtin.debug:
        msg: "Cloud-init status: {{ cloud_init_status.stdout if cloud_init_status is succeeded else 'Skipped or not available' }}"
    
    - name: Gather facts after provisioning
      ansible.builtin.setup:
    
    - name: Collect VM information
      ansible.builtin.set_fact:
        vm_info:
          name: "{{ inventory_hostname }}"
          vm_id: "{{ vm_id | default('N/A') }}"
          ip_address: "{{ ansible_default_ipv4.address | default(ansible_host) }}"
          hostname: "{{ ansible_hostname }}"
          fqdn: "{{ ansible_fqdn }}"
          os: "{{ ansible_distribution }} {{ ansible_distribution_version }}"
          kernel: "{{ ansible_kernel }}"
          architecture: "{{ ansible_architecture }}"
          cpu_cores: "{{ ansible_processor_vcpus }}"
          memory_mb: "{{ ansible_memtotal_mb }}"
          uptime_minutes: "{{ ansible_uptime_seconds | default(0) | int // 60 }}"
          ssh_status: "✅ Ready"
          group: "{{ 'master' if inventory_hostname in groups['masters'] else 'worker' }}"
    
    - name: Display individual VM information
      ansible.builtin.debug:
        msg:
          - "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          - "✅ {{ vm_info.name }} ({{ vm_info.group | upper }})"
          - "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          - "VM ID: {{ vm_info.vm_id }}"
          - "IP: {{ vm_info.ip_address }}"
          - "FQDN: {{ vm_info.fqdn }}"
          - "OS: {{ vm_info.os }}"
          - "Kernel: {{ vm_info.kernel }}"
          - "CPU: {{ vm_info.cpu_cores }} cores"
          - "RAM: {{ vm_info.memory_mb }} MB"
          - "Uptime: {{ vm_info.uptime_minutes }} minutes"
          - "SSH: {{ vm_info.ssh_status }}"

- name: Post-provisioning Summary
  hosts: localhost
  gather_facts: false
  vars_files:
    - "{{ playbook_dir }}/../group_vars/all/vars.yml"
  
  tasks:
    - name: Gather all VM facts
      ansible.builtin.set_fact:
        all_vms_info: "{{ groups['k8s_cluster'] | map('extract', hostvars) | list }}"
      run_once: true
    
    - name: Display complete cluster summary
      ansible.builtin.debug:
        msg:
          - ""
          - "╔════════════════════════════════════════════════════════════════╗"
          - "║           🎉 PROVISIONING COMPLETED SUCCESSFULLY 🎉            ║"
          - "╚════════════════════════════════════════════════════════════════╝"
          - ""
          - "📊 CLUSTER SUMMARY:"
          - "  Total VMs: {{ groups['k8s_cluster'] | length }}"
          - "  Master Nodes: {{ groups['masters'] | length }}"
          - "  Worker Nodes: {{ groups['workers'] | length }}"
          - ""
          - "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          - "🖥️  MASTER NODES"
          - "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      run_once: true
    
    - name: Display master nodes info
      ansible.builtin.debug:
        msg:
          - "{{ item }}"
          - "  IP: {{ hostvars[item].ansible_default_ipv4.address | default(hostvars[item].ansible_host) }}"
          - "  VM ID: {{ hostvars[item].vm_id | default('N/A') }}"
          - "  OS: {{ hostvars[item].ansible_distribution }} {{ hostvars[item].ansible_distribution_version }}"
          - "  CPU: {{ hostvars[item].ansible_processor_vcpus }} cores | RAM: {{ hostvars[item].ansible_memtotal_mb }} MB"
      loop: "{{ groups['masters'] }}"
      run_once: true
    
    - name: Worker nodes header
      ansible.builtin.debug:
        msg:
          - ""
          - "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          - "⚙️  WORKER NODES"
          - "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      run_once: true
    
    - name: Display worker nodes info
      ansible.builtin.debug:
        msg:
          - "{{ item }}"
          - "  IP: {{ hostvars[item].ansible_default_ipv4.address | default(hostvars[item].ansible_host) }}"
          - "  VM ID: {{ hostvars[item].vm_id | default('N/A') }}"
          - "  OS: {{ hostvars[item].ansible_distribution }} {{ hostvars[item].ansible_distribution_version }}"
          - "  CPU: {{ hostvars[item].ansible_processor_vcpus }} cores | RAM: {{ hostvars[item].ansible_memtotal_mb }} MB"
      loop: "{{ groups['workers'] }}"
      run_once: true
    
    - name: Final summary
      ansible.builtin.debug:
        msg:
          - ""
          - "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          - "📋 NEXT STEPS"
          - "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          - ""
          - "✅ All VMs are provisioned and ready!"
          - ""
          - "📊 VM Configuration Summary:"
          - "  Master Nodes: {{ vm_master_cores }} CPU cores, {{ vm_master_memory }}MB RAM, {{ vm_master_disk }}GB disk"
          - "  Worker Nodes: {{ vm_worker_cores }} CPU cores, {{ vm_worker_memory }}MB RAM, {{ vm_worker_disk }}GB disk"
          - ""
          - "Verify SSH connectivity:"
          - "  task ping"
          - ""
          - "Deploy RKE2 Kubernetes cluster:"
          - "  task rke2"
          - ""
          - "Access VMs via SSH:"
          - "  ssh -i ~/.ssh/proxmox root@192.168.68.100  # master-01"
          - "  ssh -i ~/.ssh/proxmox root@192.168.68.110  # worker-01"
          - ""
          - "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      run_once: true

